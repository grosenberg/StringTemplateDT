xvisitor grammar Format;

options {
	parserClass = STGParser;
}

@header {
	package net.certiv.stdt.core.parser.gen;

	import static net.certiv.stdt.core.preferences.PrefsKey.*;
	import net.certiv.dsl.core.formatter.DslCodeFormatter;
}

@members {

	private DslCodeFormatter helper;

	public void setHelper(DslCodeFormatter helper) {
		this.helper = helper;
	}
}

format
	: delimiters
	| imports
	| template
	| args
	| arg
	| dict
	| dpairs
	| kpairs
	| vpairs
	;

delimiters
	: /group/delimiters
		{	helper.locate($DELIMITERS).indent().spaceAfter();
			helper.locate($COMMA).space(FORMAT_SPACE_COMMA);
		}
	;

imports
	: /group/imports/importSpec
		{	helper.locate($IMPORT).indent().spaceAfter();
			helper.locate($STRING).splitAfter();
		}
	;

template
	: //template
		{	helper.locate($LPAREN).space(FORMAT_SPACE_PAREN);
			helper.locate($RPAREN).space(FORMAT_SPACE_PAREN);
			helper.locate($TMPL_ASSIGN).space(FORMAT_SPACE_TMPL_ASSIGN);
		}
	;

args
	: //formalArgs//$COMMA
		{	helper.locate($COMMA).space(FORMAT_SPACE_COMMA);	}
	;

arg
	: //formalArg
		{	helper.locate($ASSIGN).space(FORMAT_SPACE_ASSIGN);	}
	;

dict
	: //dict
		{	helper.locate($ID).indent();
			helper.locate($TMPL_ASSIGN).space(FORMAT_SPACE_TMPL_ASSIGN);
			helper.locate($LBRACK).space(FORMAT_SPACE_LBRACKET);
			helper.locate($RBRACK).space(FORMAT_SPACE_RBRACKET);
		}
	;

dpairs
	: //dictPairs//$COMMA
		{	helper.locate($COMMA).space(FORMAT_SPACE_COMMA);	}
	;

kpairs
	: //keyValuePair
		{	helper.locate($COLON).space(FORMAT_SPACE_COLON);	}
	;

vpairs
	: //defaultValuePair
		{	helper.locate($COLON).space(FORMAT_SPACE_COLON);	}
	;

	
